// Code generated by protoc-gen-go.
// source: pb/geo/geo.proto
// DO NOT EDIT!

package pbgeo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pb_money "go.pedge.io/pb/go/pb/money"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PostalAddress_Direction int32

const (
	PostalAddress_NONE PostalAddress_Direction = 0
	PostalAddress_N    PostalAddress_Direction = 1
	PostalAddress_S    PostalAddress_Direction = 2
	PostalAddress_E    PostalAddress_Direction = 3
	PostalAddress_W    PostalAddress_Direction = 4
	PostalAddress_NE   PostalAddress_Direction = 5
	PostalAddress_SE   PostalAddress_Direction = 6
	PostalAddress_NW   PostalAddress_Direction = 7
	PostalAddress_SW   PostalAddress_Direction = 8
)

var PostalAddress_Direction_name = map[int32]string{
	0: "NONE",
	1: "N",
	2: "S",
	3: "E",
	4: "W",
	5: "NE",
	6: "SE",
	7: "NW",
	8: "SW",
}
var PostalAddress_Direction_value = map[string]int32{
	"NONE": 0,
	"N":    1,
	"S":    2,
	"E":    3,
	"W":    4,
	"NE":   5,
	"SE":   6,
	"NW":   7,
	"SW":   8,
}

func (x PostalAddress_Direction) String() string {
	return proto.EnumName(PostalAddress_Direction_name, int32(x))
}
func (PostalAddress_Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

type Country struct {
	Name         string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Alpha_2Code  CountryAlpha2Code     `protobuf:"varint,2,opt,name=alpha_2_code,enum=pb.geo.CountryAlpha2Code" json:"alpha_2_code,omitempty"`
	Alpha_3Code  CountryAlpha3Code     `protobuf:"varint,3,opt,name=alpha_3_code,enum=pb.geo.CountryAlpha3Code" json:"alpha_3_code,omitempty"`
	NumericCode  uint32                `protobuf:"varint,4,opt,name=numeric_code" json:"numeric_code,omitempty"`
	CurrencyCode pb_money.CurrencyCode `protobuf:"varint,5,opt,name=currency_code,enum=pb.money.CurrencyCode" json:"currency_code,omitempty"`
}

func (m *Country) Reset()                    { *m = Country{} }
func (m *Country) String() string            { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()               {}
func (*Country) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type LatLng struct {
	LatPicos  int64 `protobuf:"varint,1,opt,name=lat_picos" json:"lat_picos,omitempty"`
	LongPicos int64 `protobuf:"varint,2,opt,name=long_picos" json:"long_picos,omitempty"`
}

func (m *LatLng) Reset()                    { *m = LatLng{} }
func (m *LatLng) String() string            { return proto.CompactTextString(m) }
func (*LatLng) ProtoMessage()               {}
func (*LatLng) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type PostalAddress struct {
	StreetNumber                     uint64                  `protobuf:"varint,1,opt,name=street_number" json:"street_number,omitempty"`
	StreetNumberPostfix              string                  `protobuf:"bytes,2,opt,name=street_number_postfix" json:"street_number_postfix,omitempty"`
	StreetName                       string                  `protobuf:"bytes,3,opt,name=street_name" json:"street_name,omitempty"`
	StreetPreDirection               PostalAddress_Direction `protobuf:"varint,4,opt,name=street_pre_direction,enum=pb.geo.PostalAddress_Direction" json:"street_pre_direction,omitempty"`
	StreetPostDirection              PostalAddress_Direction `protobuf:"varint,5,opt,name=street_post_direction,enum=pb.geo.PostalAddress_Direction" json:"street_post_direction,omitempty"`
	StreetTypeAbbreviation           string                  `protobuf:"bytes,6,opt,name=street_type_abbreviation" json:"street_type_abbreviation,omitempty"`
	SecondaryAddressTypeAbbreviation string                  `protobuf:"bytes,7,opt,name=secondary_address_type_abbreviation" json:"secondary_address_type_abbreviation,omitempty"`
	SecondaryAddressValue            string                  `protobuf:"bytes,8,opt,name=secondary_address_value" json:"secondary_address_value,omitempty"`
	LocalityName                     string                  `protobuf:"bytes,9,opt,name=locality_name" json:"locality_name,omitempty"`
	RegionCode                       string                  `protobuf:"bytes,10,opt,name=region_code" json:"region_code,omitempty"`
	PostalCode                       string                  `protobuf:"bytes,11,opt,name=postal_code" json:"postal_code,omitempty"`
	CountryAlpha_2Code               CountryAlpha2Code       `protobuf:"varint,12,opt,name=country_alpha_2_code,enum=pb.geo.CountryAlpha2Code" json:"country_alpha_2_code,omitempty"`
}

func (m *PostalAddress) Reset()                    { *m = PostalAddress{} }
func (m *PostalAddress) String() string            { return proto.CompactTextString(m) }
func (*PostalAddress) ProtoMessage()               {}
func (*PostalAddress) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func init() {
	proto.RegisterType((*Country)(nil), "pb.geo.Country")
	proto.RegisterType((*LatLng)(nil), "pb.geo.LatLng")
	proto.RegisterType((*PostalAddress)(nil), "pb.geo.PostalAddress")
	proto.RegisterEnum("pb.geo.PostalAddress_Direction", PostalAddress_Direction_name, PostalAddress_Direction_value)
}

var fileDescriptor1 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x35, 0xcd, 0x47, 0x9b, 0xbb, 0xed, 0x12, 0xc7, 0xae, 0xc6, 0x05, 0xd9, 0xa5, 0xbe, 0x08,
	0x62, 0x0a, 0xed, 0x83, 0x4f, 0x0a, 0x6b, 0xed, 0xdb, 0x52, 0x95, 0x7d, 0x28, 0xf8, 0x12, 0x26,
	0xc9, 0x18, 0x03, 0xe9, 0xcc, 0x30, 0x99, 0x2e, 0xe6, 0x8f, 0xf8, 0x73, 0xfc, 0x6d, 0xce, 0x47,
	0x62, 0x5b, 0x54, 0xf4, 0x21, 0xb9, 0xcc, 0xb9, 0xe7, 0x9c, 0xfb, 0x91, 0x09, 0x44, 0x3c, 0x9b,
	0x97, 0x84, 0xe9, 0x27, 0xe1, 0x82, 0x49, 0x86, 0x02, 0x9e, 0x25, 0xea, 0x74, 0x39, 0x3d, 0xca,
	0x94, 0x84, 0xda, 0xec, 0x65, 0xac, 0xd0, 0x1d, 0xa3, 0xa4, 0xb5, 0xef, 0x43, 0x66, 0xf6, 0xc3,
	0x81, 0xe1, 0x8a, 0xed, 0xa9, 0x14, 0x2d, 0x1a, 0x83, 0x47, 0xf1, 0x8e, 0xc4, 0xce, 0xb5, 0xf3,
	0x22, 0x44, 0x73, 0x18, 0xe3, 0x9a, 0x7f, 0xc5, 0xe9, 0x22, 0xcd, 0x59, 0x41, 0xe2, 0x81, 0x42,
	0xcf, 0x17, 0x4f, 0x13, 0x5b, 0x28, 0xe9, 0x44, 0x37, 0x9a, 0xb2, 0x58, 0x29, 0xc2, 0x41, 0xb0,
	0xb4, 0x02, 0xf7, 0xef, 0x82, 0xa5, 0x11, 0x4c, 0x61, 0x4c, 0xf7, 0x3b, 0x22, 0xaa, 0xdc, 0x0a,
	0x3c, 0x25, 0x98, 0xa0, 0x57, 0x30, 0xc9, 0xf7, 0x42, 0x10, 0x9a, 0xb7, 0x16, 0xf6, 0x8d, 0xcf,
	0x63, 0xed, 0x63, 0xbb, 0x5f, 0x75, 0x69, 0x6d, 0x32, 0x9b, 0x43, 0x70, 0x8b, 0xe5, 0x2d, 0x2d,
	0xd1, 0x43, 0x08, 0x6b, 0x2c, 0x53, 0x5e, 0xe5, 0xac, 0x31, 0x33, 0xb8, 0x08, 0x01, 0xd4, 0x8c,
	0x96, 0x1d, 0xa6, 0x27, 0x70, 0x67, 0xdf, 0x3d, 0x98, 0x7c, 0x64, 0x8d, 0xc4, 0xf5, 0x4d, 0x51,
	0x08, 0xd2, 0x34, 0xe8, 0x02, 0x26, 0x8d, 0x14, 0x84, 0xc8, 0x54, 0xb5, 0x93, 0x11, 0x61, 0xc4,
	0x1e, 0x7a, 0x06, 0x17, 0x27, 0x70, 0xca, 0x95, 0xea, 0x4b, 0xf5, 0xcd, 0xf8, 0x84, 0xe8, 0x11,
	0x9c, 0xf5, 0x69, 0xbd, 0x34, 0xd7, 0x80, 0x6f, 0x60, 0xda, 0x81, 0x5c, 0x90, 0xb4, 0xa8, 0x04,
	0xc9, 0x65, 0xc5, 0xa8, 0x19, 0xed, 0x7c, 0x71, 0xd5, 0xef, 0xe2, 0xa4, 0x7e, 0xf2, 0xbe, 0xa7,
	0xa1, 0xb7, 0xbf, 0x4a, 0xea, 0x5a, 0x47, 0x7a, 0xff, 0xff, 0xf4, 0xd7, 0x10, 0x77, 0x7a, 0xd9,
	0x72, 0x92, 0xe2, 0x2c, 0x13, 0xe4, 0xbe, 0xc2, 0xc6, 0x22, 0x30, 0x0d, 0xbe, 0x84, 0xe7, 0x0d,
	0xc9, 0x19, 0x2d, 0xb0, 0x68, 0x53, 0x6c, 0x0d, 0xfe, 0x40, 0x1e, 0x1a, 0xf2, 0x15, 0x3c, 0xf9,
	0x9d, 0x7c, 0x8f, 0xeb, 0x3d, 0x89, 0x47, 0x86, 0xa0, 0x36, 0x57, 0xb3, 0x1c, 0xd7, 0x95, 0x6c,
	0xed, 0x16, 0xc2, 0x7e, 0x35, 0x82, 0x94, 0xca, 0xc7, 0x7e, 0x40, 0xe8, 0x41, 0x6e, 0xda, 0xb6,
	0xe0, 0x99, 0x01, 0x5f, 0xc3, 0x34, 0xb7, 0xf7, 0x22, 0x3d, 0xb9, 0x6c, 0xe3, 0x7f, 0x5c, 0xb6,
	0xd9, 0x27, 0x08, 0x0f, 0x63, 0x8f, 0xc0, 0xdb, 0x7c, 0xd8, 0xac, 0xa3, 0x07, 0xc8, 0x07, 0x67,
	0x13, 0x39, 0x3a, 0xdc, 0x45, 0x03, 0x1d, 0xd6, 0x91, 0xab, 0xc3, 0x36, 0xf2, 0x50, 0x00, 0x03,
	0xc5, 0xf1, 0x75, 0xbc, 0x5b, 0x47, 0x81, 0x39, 0x6f, 0xa3, 0xa1, 0x39, 0x6f, 0xa3, 0xd1, 0xbb,
	0xe1, 0x67, 0x9f, 0x67, 0xaa, 0x5a, 0x16, 0x98, 0x5f, 0x63, 0xf9, 0x33, 0x00, 0x00, 0xff, 0xff,
	0xf6, 0x4c, 0x4e, 0xff, 0x66, 0x03, 0x00, 0x00,
}
