// Code generated by protoc-gen-go.
// source: google/api/monitored_resource.proto
// DO NOT EDIT!

package google_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A descriptor that describes the schema of [MonitoredResource][google.api.MonitoredResource].
type MonitoredResourceDescriptor struct {
	// The monitored resource type. For example, the type `"cloudsql_database"`
	// represents databases in Google Cloud SQL.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// A concise name for the monitored resource type that can be displayed in
	// user interfaces. For example, `"Google Cloud SQL Database"`.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name" json:"display_name,omitempty"`
	// A detailed description of the monitored resource type that can be used in
	// documentation.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// A set of labels that can be used to describe instances of this monitored
	// resource type. For example, Google Cloud SQL databases can be labeled with
	// their `"database_id"` and their `"zone"`.
	Labels []*LabelDescriptor `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty"`
}

func (m *MonitoredResourceDescriptor) Reset()                    { *m = MonitoredResourceDescriptor{} }
func (m *MonitoredResourceDescriptor) String() string            { return proto.CompactTextString(m) }
func (*MonitoredResourceDescriptor) ProtoMessage()               {}
func (*MonitoredResourceDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *MonitoredResourceDescriptor) GetLabels() []*LabelDescriptor {
	if m != nil {
		return m.Labels
	}
	return nil
}

// A monitored resource describes a resource that can be used for monitoring
// purpose. It can also be used for logging, billing, and other purposes. Each
// resource has a `type` and a set of `labels`. The labels contain information
// that identifies the resource and describes attributes of it. For example,
// you can use monitored resource to describe a normal file, where the resource
// has `type` as `"file"`, the label `path` identifies the file, and the label
// `size` describes the file size. The monitoring system can use a set of
// monitored resources of files to generate file size distribution.
type MonitoredResource struct {
	// The monitored resource type. This field must match the corresponding
	// [MonitoredResourceDescriptor.type][google.api.MonitoredResourceDescriptor.type] to this resource..  For example,
	// `"cloudsql_database"` represents Cloud SQL databases.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Values for some or all of the labels listed in the associated monitored
	// resource descriptor. For example, you specify a specific Cloud SQL database
	// by supplying values for both the `"database_id"` and `"zone"` labels.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MonitoredResource) Reset()                    { *m = MonitoredResource{} }
func (m *MonitoredResource) String() string            { return proto.CompactTextString(m) }
func (*MonitoredResource) ProtoMessage()               {}
func (*MonitoredResource) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *MonitoredResource) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*MonitoredResourceDescriptor)(nil), "google.api.MonitoredResourceDescriptor")
	proto.RegisterType((*MonitoredResource)(nil), "google.api.MonitoredResource")
}

var fileDescriptor1 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0xcf, 0xcd, 0xcf, 0xcb, 0x2c, 0xc9, 0x2f, 0x4a, 0x4d,
	0x89, 0x2f, 0x4a, 0x2d, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x82, 0x28, 0xd2, 0x03, 0x2a, 0x92, 0x12, 0x43, 0xd2, 0x90, 0x93, 0x98, 0x94, 0x9a, 0x03,
	0x51, 0xa3, 0xd4, 0xcc, 0xc8, 0x25, 0xed, 0x0b, 0x33, 0x20, 0x08, 0xaa, 0xdf, 0x25, 0xb5, 0x38,
	0xb9, 0x28, 0xb3, 0x00, 0x28, 0x26, 0xc4, 0xc3, 0xc5, 0x52, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x29, 0x24, 0xc2, 0xc5, 0x93, 0x92, 0x59, 0x5c, 0x90, 0x93, 0x58, 0x19, 0x9f,
	0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x04, 0x16, 0x15, 0xe6, 0xe2, 0x4e, 0x81, 0xea, 0xc8, 0xcc, 0xcf,
	0x93, 0x60, 0x06, 0x0b, 0x6a, 0x73, 0xb1, 0x81, 0xed, 0x29, 0x96, 0x60, 0x51, 0x60, 0xd6, 0xe0,
	0x36, 0x92, 0xd6, 0x43, 0xb8, 0x46, 0xcf, 0x07, 0x24, 0x83, 0xb0, 0x45, 0xa9, 0x9b, 0x91, 0x4b,
	0x10, 0xc3, 0x15, 0x68, 0x76, 0x5b, 0xc2, 0x0d, 0x64, 0x02, 0x1b, 0xa8, 0x89, 0x6c, 0x20, 0x86,
	0x66, 0x88, 0x15, 0xc5, 0xae, 0x79, 0x25, 0x45, 0x95, 0x52, 0xba, 0x5c, 0xdc, 0x48, 0x5c, 0x21,
	0x6e, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0xa8, 0xb1, 0xbc, 0x5c, 0xac, 0x65, 0x89, 0x39, 0xa5, 0x50,
	0xbf, 0x58, 0x31, 0x59, 0x30, 0x3a, 0x69, 0x71, 0xf1, 0x25, 0xe7, 0xe7, 0x22, 0x19, 0xef, 0x24,
	0x86, 0x61, 0x7e, 0x00, 0x28, 0xf4, 0x02, 0x18, 0x93, 0xd8, 0xc0, 0xc1, 0x68, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x36, 0x32, 0xb7, 0x61, 0x91, 0x01, 0x00, 0x00,
}
