// Code generated by protoc-gen-go.
// source: google/logging/v2/logging_config.proto
// DO NOT EDIT!

package google_logging_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import _ "go.pedge.io/pb/go/google/protobuf"
import _ "go.pedge.io/pb/go/google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Available log entry formats. Log entries can be written to Cloud
// Logging in either format and can be exported in either format.
// Version 2 is the preferred format.
type LogSink_VersionFormat int32

const (
	// An unspecified version format will default to V2.
	LogSink_VERSION_FORMAT_UNSPECIFIED LogSink_VersionFormat = 0
	// `LogEntry` version 2 format.
	LogSink_V2 LogSink_VersionFormat = 1
	// `LogEntry` version 1 format.
	LogSink_V1 LogSink_VersionFormat = 2
)

var LogSink_VersionFormat_name = map[int32]string{
	0: "VERSION_FORMAT_UNSPECIFIED",
	1: "V2",
	2: "V1",
}
var LogSink_VersionFormat_value = map[string]int32{
	"VERSION_FORMAT_UNSPECIFIED": 0,
	"V2": 1,
	"V1": 2,
}

func (x LogSink_VersionFormat) String() string {
	return proto.EnumName(LogSink_VersionFormat_name, int32(x))
}
func (LogSink_VersionFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

// Describes a sink used to export log entries outside Cloud Logging.
type LogSink struct {
	// Required. The client-assigned sink identifier. Example:
	// `"my-severe-errors-to-pubsub"`.
	// Sink identifiers are limited to 1000 characters
	// and can include only the following characters: `A-Z`, `a-z`,
	// `0-9`, and the special characters `_-.`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The export destination. See
	// [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
	// Examples: `"storage.googleapis.com/a-bucket"`,
	// `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
	Destination string `protobuf:"bytes,3,opt,name=destination" json:"destination,omitempty"`
	// An [advanced logs filter](/logging/docs/view/advanced_filters)
	// that defines the log entries to be exported.  The filter must be
	// consistent with the log entry format designed by the
	// `outputVersionFormat` parameter, regardless of the format of the
	// log entry that was originally written to Cloud Logging.
	// Example: `"logName:syslog AND severity>=ERROR"`.
	Filter string `protobuf:"bytes,5,opt,name=filter" json:"filter,omitempty"`
	// The log entry version used when exporting log entries from this
	// sink.  This version does not have to correspond to the version of
	// the log entry when it was written to Cloud Logging.
	OutputVersionFormat LogSink_VersionFormat `protobuf:"varint,6,opt,name=output_version_format,enum=google.logging.v2.LogSink_VersionFormat" json:"output_version_format,omitempty"`
}

func (m *LogSink) Reset()                    { *m = LogSink{} }
func (m *LogSink) String() string            { return proto.CompactTextString(m) }
func (*LogSink) ProtoMessage()               {}
func (*LogSink) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// The parameters to `ListSinks`.
type ListSinksRequest struct {
	// Required. The resource name of the project containing the sinks.
	// Example: `"projects/my-logging-project"`, `"projects/01234567890"`.
	ProjectName string `protobuf:"bytes,1,opt,name=project_name" json:"project_name,omitempty"`
	// Optional. If the `pageToken` request parameter is supplied, then the next
	// page of results in the set are retrieved.  The `pageToken` parameter must
	// be set with the value of the `nextPageToken` result parameter from the
	// previous request. The value of `projectName` must be the same as in the
	// previous request.
	PageToken string `protobuf:"bytes,2,opt,name=page_token" json:"page_token,omitempty"`
	// Optional. The maximum number of results to return from this request.  Fewer
	// results might be returned. You must check for the `nextPageToken` result to
	// determine if additional results are available, which you can retrieve by
	// passing the `nextPageToken` value in the `pageToken` parameter to the next
	// request.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size" json:"page_size,omitempty"`
}

func (m *ListSinksRequest) Reset()                    { *m = ListSinksRequest{} }
func (m *ListSinksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSinksRequest) ProtoMessage()               {}
func (*ListSinksRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// Result returned from `ListSinks`.
type ListSinksResponse struct {
	// A list of sinks.
	Sinks []*LogSink `protobuf:"bytes,1,rep,name=sinks" json:"sinks,omitempty"`
	// If there are more results than were returned, then `nextPageToken` is
	// given a value in the response.  To get the next batch of results, call this
	// method again using the value of `nextPageToken` as `pageToken`.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token" json:"next_page_token,omitempty"`
}

func (m *ListSinksResponse) Reset()                    { *m = ListSinksResponse{} }
func (m *ListSinksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSinksResponse) ProtoMessage()               {}
func (*ListSinksResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ListSinksResponse) GetSinks() []*LogSink {
	if m != nil {
		return m.Sinks
	}
	return nil
}

// The parameters to `GetSink`.
type GetSinkRequest struct {
	// The resource name of the sink to return.
	// Example: `"projects/my-project-id/sinks/my-sink-id"`.
	SinkName string `protobuf:"bytes,1,opt,name=sink_name" json:"sink_name,omitempty"`
}

func (m *GetSinkRequest) Reset()                    { *m = GetSinkRequest{} }
func (m *GetSinkRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSinkRequest) ProtoMessage()               {}
func (*GetSinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

// The parameters to `CreateSink`.
type CreateSinkRequest struct {
	// The resource name of the project in which to create the sink.
	// Example: `"projects/my-project-id"`.
	//
	// The new sink must be provided in the request.
	ProjectName string `protobuf:"bytes,1,opt,name=project_name" json:"project_name,omitempty"`
	// The new sink, which must not have an identifier that already
	// exists.
	Sink *LogSink `protobuf:"bytes,2,opt,name=sink" json:"sink,omitempty"`
}

func (m *CreateSinkRequest) Reset()                    { *m = CreateSinkRequest{} }
func (m *CreateSinkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSinkRequest) ProtoMessage()               {}
func (*CreateSinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CreateSinkRequest) GetSink() *LogSink {
	if m != nil {
		return m.Sink
	}
	return nil
}

// The parameters to `UpdateSink`.
type UpdateSinkRequest struct {
	// The resource name of the sink to update.
	// Example: `"projects/my-project-id/sinks/my-sink-id"`.
	//
	// The updated sink must be provided in the request and have the
	// same name that is specified in `sinkName`.  If the sink does not
	// exist, it is created.
	SinkName string `protobuf:"bytes,1,opt,name=sink_name" json:"sink_name,omitempty"`
	// The updated sink, whose name must be the same as the sink
	// identifier in `sinkName`.  If `sinkName` does not exist, then
	// this method creates a new sink.
	Sink *LogSink `protobuf:"bytes,2,opt,name=sink" json:"sink,omitempty"`
}

func (m *UpdateSinkRequest) Reset()                    { *m = UpdateSinkRequest{} }
func (m *UpdateSinkRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSinkRequest) ProtoMessage()               {}
func (*UpdateSinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *UpdateSinkRequest) GetSink() *LogSink {
	if m != nil {
		return m.Sink
	}
	return nil
}

// The parameters to `DeleteSink`.
type DeleteSinkRequest struct {
	// The resource name of the sink to delete.
	// Example: `"projects/my-project-id/sinks/my-sink-id"`.
	SinkName string `protobuf:"bytes,1,opt,name=sink_name" json:"sink_name,omitempty"`
}

func (m *DeleteSinkRequest) Reset()                    { *m = DeleteSinkRequest{} }
func (m *DeleteSinkRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSinkRequest) ProtoMessage()               {}
func (*DeleteSinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func init() {
	proto.RegisterType((*LogSink)(nil), "google.logging.v2.LogSink")
	proto.RegisterType((*ListSinksRequest)(nil), "google.logging.v2.ListSinksRequest")
	proto.RegisterType((*ListSinksResponse)(nil), "google.logging.v2.ListSinksResponse")
	proto.RegisterType((*GetSinkRequest)(nil), "google.logging.v2.GetSinkRequest")
	proto.RegisterType((*CreateSinkRequest)(nil), "google.logging.v2.CreateSinkRequest")
	proto.RegisterType((*UpdateSinkRequest)(nil), "google.logging.v2.UpdateSinkRequest")
	proto.RegisterType((*DeleteSinkRequest)(nil), "google.logging.v2.DeleteSinkRequest")
	proto.RegisterEnum("google.logging.v2.LogSink_VersionFormat", LogSink_VersionFormat_name, LogSink_VersionFormat_value)
}

var fileDescriptor2 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0x9c, 0x36, 0xa9, 0x32, 0x6d, 0xd3, 0x78, 0x3f, 0x0a, 0x91, 0x41, 0xfc, 0xb8, 0xa8,
	0xb8, 0xb9, 0xb0, 0x5b, 0x23, 0xb8, 0x40, 0x42, 0x88, 0xa6, 0x49, 0x15, 0x29, 0x34, 0x51, 0x42,
	0xc3, 0xa5, 0xe5, 0xa4, 0x1b, 0xcb, 0x34, 0xf6, 0x1a, 0x7b, 0x13, 0x51, 0x2a, 0x6e, 0x90, 0x40,
	0xdc, 0xf3, 0x0c, 0xbc, 0x0a, 0x2f, 0xc0, 0x2b, 0xf0, 0x20, 0x6c, 0xd6, 0x4e, 0xe3, 0xc6, 0x26,
	0x84, 0xab, 0x78, 0x67, 0x66, 0xcf, 0x39, 0x33, 0x67, 0xb2, 0xb0, 0x6b, 0x11, 0x62, 0x0d, 0xb1,
	0x36, 0x24, 0x96, 0x65, 0xbb, 0x96, 0x36, 0xd6, 0xa7, 0x9f, 0x46, 0x9f, 0xb8, 0x03, 0xdb, 0x52,
	0x3d, 0x9f, 0x50, 0x82, 0xc4, 0xb0, 0x4e, 0x8d, 0x92, 0xea, 0x58, 0x97, 0xee, 0x44, 0x57, 0x4d,
	0xcf, 0xd6, 0x4c, 0xd7, 0x25, 0xd4, 0xa4, 0x36, 0x71, 0x83, 0xf0, 0x82, 0x74, 0x3b, 0xca, 0xf2,
	0x53, 0x6f, 0x34, 0xd0, 0xb0, 0xe3, 0xd1, 0x8b, 0x28, 0x79, 0x6f, 0x3e, 0x49, 0x6d, 0x07, 0x07,
	0xd4, 0x74, 0xbc, 0xb0, 0x40, 0xfe, 0x21, 0xc0, 0x5a, 0x83, 0x58, 0x1d, 0xdb, 0x3d, 0x47, 0x1b,
	0xb0, 0xea, 0x9a, 0x0e, 0x2e, 0x09, 0xf7, 0x05, 0x25, 0x8f, 0xfe, 0x87, 0xf5, 0x33, 0x56, 0x6a,
	0xbb, 0x9c, 0xad, 0xb4, 0xc2, 0x83, 0x05, 0xc8, 0x0d, 0xec, 0x21, 0xc5, 0x7e, 0x29, 0xcb, 0xcf,
	0xc7, 0xb0, 0x4d, 0x46, 0xd4, 0x1b, 0x51, 0x63, 0x8c, 0xfd, 0x80, 0xd5, 0x19, 0x03, 0xe2, 0x3b,
	0x26, 0x2d, 0xe5, 0x58, 0xba, 0xa0, 0x2b, 0x6a, 0xa2, 0x1b, 0x35, 0x62, 0x53, 0xbb, 0xe1, 0x85,
	0x1a, 0xaf, 0x97, 0x5f, 0xc0, 0xe6, 0xb5, 0x00, 0xba, 0x0b, 0x52, 0xb7, 0xda, 0xee, 0xd4, 0x9b,
	0x27, 0x46, 0xad, 0xd9, 0x7e, 0xf5, 0xf2, 0xb5, 0x71, 0x7a, 0xd2, 0x69, 0x55, 0x2b, 0xf5, 0x5a,
	0xbd, 0x7a, 0x54, 0xfc, 0x0f, 0xe5, 0x20, 0xd3, 0xd5, 0x8b, 0x02, 0xff, 0x3d, 0x28, 0x66, 0xe4,
	0x26, 0x14, 0x1b, 0x76, 0x40, 0x27, 0xd0, 0x41, 0x1b, 0xbf, 0x1b, 0x31, 0xe9, 0xe8, 0x06, 0x6c,
	0xb0, 0x2e, 0xdf, 0xe2, 0x3e, 0x35, 0x62, 0x8d, 0x21, 0x00, 0xcf, 0xb4, 0xb0, 0x41, 0xc9, 0x39,
	0x76, 0x4b, 0x19, 0x1e, 0x13, 0x21, 0xcf, 0x63, 0x81, 0xfd, 0x01, 0xf3, 0x56, 0xb3, 0xf2, 0x1b,
	0x10, 0x63, 0x80, 0x81, 0xc7, 0x26, 0x8e, 0xd1, 0x1e, 0x64, 0x83, 0x49, 0x80, 0x41, 0xad, 0x28,
	0xeb, 0xba, 0xf4, 0xe7, 0xfe, 0xd0, 0x2d, 0xd8, 0x72, 0xf1, 0x7b, 0x6a, 0xcc, 0x73, 0xc9, 0x3b,
	0x50, 0x38, 0xc6, 0x1c, 0x77, 0xaa, 0x93, 0xb1, 0x4f, 0x50, 0x63, 0x22, 0xe5, 0x0e, 0x88, 0x15,
	0x1f, 0x9b, 0x14, 0xc7, 0xeb, 0xd2, 0xfb, 0x51, 0x60, 0x75, 0x72, 0x9b, 0xa3, 0x2f, 0x94, 0x24,
	0xb7, 0x40, 0x3c, 0xf5, 0xce, 0xe6, 0x40, 0x93, 0xe4, 0xff, 0x80, 0xb8, 0x0b, 0xe2, 0x11, 0x1e,
	0xe2, 0xbf, 0x21, 0xea, 0xdf, 0xb3, 0xb0, 0x55, 0xe1, 0x6b, 0xde, 0xc1, 0xfe, 0xd8, 0xee, 0xe3,
	0xae, 0x8e, 0xbe, 0x0a, 0x90, 0xbf, 0x9a, 0x30, 0xda, 0x49, 0x63, 0x99, 0x33, 0x54, 0x7a, 0xb8,
	0xb8, 0x28, 0x34, 0x49, 0xde, 0xff, 0xf4, 0xf3, 0xd7, 0xb7, 0x4c, 0x19, 0x29, 0xec, 0x4f, 0xd6,
	0xc3, 0xd4, 0x3c, 0xd0, 0x2e, 0xe3, 0x63, 0x7b, 0x1e, 0x1d, 0x02, 0xad, 0xfc, 0x51, 0xe3, 0x6e,
	0xa2, 0x0b, 0x58, 0x8b, 0x2c, 0x41, 0x0f, 0x52, 0x28, 0xae, 0xdb, 0x25, 0x2d, 0x1a, 0x88, 0xc6,
	0xb9, 0xf7, 0xd0, 0xa3, 0x19, 0xf7, 0xd5, 0x2c, 0x62, 0xc4, 0x21, 0x2f, 0x13, 0x80, 0xbe, 0x08,
	0x00, 0x33, 0xa7, 0x51, 0x5a, 0x87, 0x89, 0x45, 0x58, 0xa8, 0xe0, 0x29, 0x57, 0xb0, 0x2f, 0x2f,
	0xdd, 0xfd, 0x33, 0x6e, 0x36, 0xfa, 0xcc, 0x84, 0xcc, 0xb6, 0x23, 0x55, 0x48, 0x62, 0x79, 0x16,
	0x0a, 0x79, 0xc2, 0x85, 0x68, 0xd2, 0xb2, 0xa3, 0x88, 0x74, 0x5c, 0x02, 0xcc, 0x56, 0x2a, 0x55,
	0x46, 0x62, 0xe3, 0xa4, 0x9b, 0xd3, 0xaa, 0xe9, 0x3b, 0xa7, 0x56, 0x27, 0x8f, 0xe0, 0xd4, 0x8d,
	0xf2, 0xb2, 0x12, 0x0e, 0x15, 0xd8, 0xee, 0x13, 0x27, 0xc9, 0x79, 0xb8, 0xd9, 0x08, 0xbf, 0xc3,
	0x25, 0x6e, 0x09, 0xbd, 0x1c, 0xa7, 0x7a, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x88, 0xa3,
	0x2f, 0xd8, 0x05, 0x00, 0x00,
}
