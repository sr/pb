// Code generated by protoc-gen-gogo.
// source: pb/geo/geo.proto
// DO NOT EDIT!

package pbgeo

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import pb_money "go.pedge.io/pb/gogo/pb/money"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PostalAddress_Direction int32

const (
	PostalAddress_NONE PostalAddress_Direction = 0
	PostalAddress_N    PostalAddress_Direction = 1
	PostalAddress_S    PostalAddress_Direction = 2
	PostalAddress_E    PostalAddress_Direction = 3
	PostalAddress_W    PostalAddress_Direction = 4
	PostalAddress_NE   PostalAddress_Direction = 5
	PostalAddress_SE   PostalAddress_Direction = 6
	PostalAddress_NW   PostalAddress_Direction = 7
	PostalAddress_SW   PostalAddress_Direction = 8
)

var PostalAddress_Direction_name = map[int32]string{
	0: "NONE",
	1: "N",
	2: "S",
	3: "E",
	4: "W",
	5: "NE",
	6: "SE",
	7: "NW",
	8: "SW",
}
var PostalAddress_Direction_value = map[string]int32{
	"NONE": 0,
	"N":    1,
	"S":    2,
	"E":    3,
	"W":    4,
	"NE":   5,
	"SE":   6,
	"NW":   7,
	"SW":   8,
}

func (x PostalAddress_Direction) String() string {
	return proto.EnumName(PostalAddress_Direction_name, int32(x))
}

type Country struct {
	Name         string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Alpha_2Code  CountryAlpha2Code     `protobuf:"varint,2,opt,name=alpha_2_code,proto3,enum=pb.geo.CountryAlpha2Code" json:"alpha_2_code,omitempty"`
	Alpha_3Code  CountryAlpha3Code     `protobuf:"varint,3,opt,name=alpha_3_code,proto3,enum=pb.geo.CountryAlpha3Code" json:"alpha_3_code,omitempty"`
	NumericCode  uint32                `protobuf:"varint,4,opt,name=numeric_code,proto3" json:"numeric_code,omitempty"`
	CurrencyCode pb_money.CurrencyCode `protobuf:"varint,5,opt,name=currency_code,proto3,enum=pb.money.CurrencyCode" json:"currency_code,omitempty"`
}

func (m *Country) Reset()         { *m = Country{} }
func (m *Country) String() string { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()    {}

type LatLng struct {
	LatPicos  int64 `protobuf:"varint,1,opt,name=lat_picos,proto3" json:"lat_picos,omitempty"`
	LongPicos int64 `protobuf:"varint,2,opt,name=long_picos,proto3" json:"long_picos,omitempty"`
}

func (m *LatLng) Reset()         { *m = LatLng{} }
func (m *LatLng) String() string { return proto.CompactTextString(m) }
func (*LatLng) ProtoMessage()    {}

type PostalAddress struct {
	StreetNumber                     uint64                  `protobuf:"varint,1,opt,name=street_number,proto3" json:"street_number,omitempty"`
	StreetNumberPostfix              string                  `protobuf:"bytes,2,opt,name=street_number_postfix,proto3" json:"street_number_postfix,omitempty"`
	StreetName                       string                  `protobuf:"bytes,3,opt,name=street_name,proto3" json:"street_name,omitempty"`
	StreetPreDirection               PostalAddress_Direction `protobuf:"varint,4,opt,name=street_pre_direction,proto3,enum=pb.geo.PostalAddress_Direction" json:"street_pre_direction,omitempty"`
	StreetPostDirection              PostalAddress_Direction `protobuf:"varint,5,opt,name=street_post_direction,proto3,enum=pb.geo.PostalAddress_Direction" json:"street_post_direction,omitempty"`
	StreetTypeAbbreviation           string                  `protobuf:"bytes,6,opt,name=street_type_abbreviation,proto3" json:"street_type_abbreviation,omitempty"`
	SecondaryAddressTypeAbbreviation string                  `protobuf:"bytes,7,opt,name=secondary_address_type_abbreviation,proto3" json:"secondary_address_type_abbreviation,omitempty"`
	SecondaryAddressValue            string                  `protobuf:"bytes,8,opt,name=secondary_address_value,proto3" json:"secondary_address_value,omitempty"`
	LocalityName                     string                  `protobuf:"bytes,9,opt,name=locality_name,proto3" json:"locality_name,omitempty"`
	RegionCode                       string                  `protobuf:"bytes,10,opt,name=region_code,proto3" json:"region_code,omitempty"`
	PostalCode                       string                  `protobuf:"bytes,11,opt,name=postal_code,proto3" json:"postal_code,omitempty"`
	CountryAlpha_2Code               CountryAlpha2Code       `protobuf:"varint,12,opt,name=country_alpha_2_code,proto3,enum=pb.geo.CountryAlpha2Code" json:"country_alpha_2_code,omitempty"`
}

func (m *PostalAddress) Reset()         { *m = PostalAddress{} }
func (m *PostalAddress) String() string { return proto.CompactTextString(m) }
func (*PostalAddress) ProtoMessage()    {}

func init() {
	proto.RegisterType((*Country)(nil), "pb.geo.Country")
	proto.RegisterType((*LatLng)(nil), "pb.geo.LatLng")
	proto.RegisterType((*PostalAddress)(nil), "pb.geo.PostalAddress")
	proto.RegisterEnum("pb.geo.PostalAddress_Direction", PostalAddress_Direction_name, PostalAddress_Direction_value)
}
func (m *Country) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Country) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.Alpha_2Code != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGeo(data, i, uint64(m.Alpha_2Code))
	}
	if m.Alpha_3Code != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintGeo(data, i, uint64(m.Alpha_3Code))
	}
	if m.NumericCode != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGeo(data, i, uint64(m.NumericCode))
	}
	if m.CurrencyCode != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintGeo(data, i, uint64(m.CurrencyCode))
	}
	return i, nil
}

func (m *LatLng) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LatLng) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LatPicos != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGeo(data, i, uint64(m.LatPicos))
	}
	if m.LongPicos != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGeo(data, i, uint64(m.LongPicos))
	}
	return i, nil
}

func (m *PostalAddress) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PostalAddress) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StreetNumber != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGeo(data, i, uint64(m.StreetNumber))
	}
	if len(m.StreetNumberPostfix) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.StreetNumberPostfix)))
		i += copy(data[i:], m.StreetNumberPostfix)
	}
	if len(m.StreetName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.StreetName)))
		i += copy(data[i:], m.StreetName)
	}
	if m.StreetPreDirection != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGeo(data, i, uint64(m.StreetPreDirection))
	}
	if m.StreetPostDirection != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintGeo(data, i, uint64(m.StreetPostDirection))
	}
	if len(m.StreetTypeAbbreviation) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.StreetTypeAbbreviation)))
		i += copy(data[i:], m.StreetTypeAbbreviation)
	}
	if len(m.SecondaryAddressTypeAbbreviation) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.SecondaryAddressTypeAbbreviation)))
		i += copy(data[i:], m.SecondaryAddressTypeAbbreviation)
	}
	if len(m.SecondaryAddressValue) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.SecondaryAddressValue)))
		i += copy(data[i:], m.SecondaryAddressValue)
	}
	if len(m.LocalityName) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.LocalityName)))
		i += copy(data[i:], m.LocalityName)
	}
	if len(m.RegionCode) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.RegionCode)))
		i += copy(data[i:], m.RegionCode)
	}
	if len(m.PostalCode) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintGeo(data, i, uint64(len(m.PostalCode)))
		i += copy(data[i:], m.PostalCode)
	}
	if m.CountryAlpha_2Code != 0 {
		data[i] = 0x60
		i++
		i = encodeVarintGeo(data, i, uint64(m.CountryAlpha_2Code))
	}
	return i, nil
}

func encodeFixed64Geo(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Geo(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGeo(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Country) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	if m.Alpha_2Code != 0 {
		n += 1 + sovGeo(uint64(m.Alpha_2Code))
	}
	if m.Alpha_3Code != 0 {
		n += 1 + sovGeo(uint64(m.Alpha_3Code))
	}
	if m.NumericCode != 0 {
		n += 1 + sovGeo(uint64(m.NumericCode))
	}
	if m.CurrencyCode != 0 {
		n += 1 + sovGeo(uint64(m.CurrencyCode))
	}
	return n
}

func (m *LatLng) Size() (n int) {
	var l int
	_ = l
	if m.LatPicos != 0 {
		n += 1 + sovGeo(uint64(m.LatPicos))
	}
	if m.LongPicos != 0 {
		n += 1 + sovGeo(uint64(m.LongPicos))
	}
	return n
}

func (m *PostalAddress) Size() (n int) {
	var l int
	_ = l
	if m.StreetNumber != 0 {
		n += 1 + sovGeo(uint64(m.StreetNumber))
	}
	l = len(m.StreetNumberPostfix)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	l = len(m.StreetName)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	if m.StreetPreDirection != 0 {
		n += 1 + sovGeo(uint64(m.StreetPreDirection))
	}
	if m.StreetPostDirection != 0 {
		n += 1 + sovGeo(uint64(m.StreetPostDirection))
	}
	l = len(m.StreetTypeAbbreviation)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	l = len(m.SecondaryAddressTypeAbbreviation)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	l = len(m.SecondaryAddressValue)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	l = len(m.LocalityName)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	l = len(m.RegionCode)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	l = len(m.PostalCode)
	if l > 0 {
		n += 1 + l + sovGeo(uint64(l))
	}
	if m.CountryAlpha_2Code != 0 {
		n += 1 + sovGeo(uint64(m.CountryAlpha_2Code))
	}
	return n
}

func sovGeo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGeo(x uint64) (n int) {
	return sovGeo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Country) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Country: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Country: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha_2Code", wireType)
			}
			m.Alpha_2Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Alpha_2Code |= (CountryAlpha2Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha_3Code", wireType)
			}
			m.Alpha_3Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Alpha_3Code |= (CountryAlpha3Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumericCode", wireType)
			}
			m.NumericCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumericCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyCode", wireType)
			}
			m.CurrencyCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CurrencyCode |= (pb_money.CurrencyCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeo(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatLng) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatLng: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatLng: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatPicos", wireType)
			}
			m.LatPicos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LatPicos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongPicos", wireType)
			}
			m.LongPicos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LongPicos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeo(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostalAddress) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostalAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostalAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetNumber", wireType)
			}
			m.StreetNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StreetNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetNumberPostfix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetNumberPostfix = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetPreDirection", wireType)
			}
			m.StreetPreDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StreetPreDirection |= (PostalAddress_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetPostDirection", wireType)
			}
			m.StreetPostDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StreetPostDirection |= (PostalAddress_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetTypeAbbreviation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetTypeAbbreviation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryAddressTypeAbbreviation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryAddressTypeAbbreviation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryAddressValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryAddressValue = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalityName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGeo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostalCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryAlpha_2Code", wireType)
			}
			m.CountryAlpha_2Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CountryAlpha_2Code |= (CountryAlpha2Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeo(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeo(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGeo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGeo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGeo(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGeo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeo   = fmt.Errorf("proto: integer overflow")
)
