// Code generated by protoc-gen-gogo.
// source: google/iam/v1/policy.proto
// DO NOT EDIT!

package google_iam_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// # Overview
//
// The `Policy` defines an access control policy language. It is used to
// define policies that are attached to resources like files, folders, VMs,
// etc.
//
//
// # Policy structure
//
// A `Policy` consists of a list of bindings. A `Binding` binds a set of members
// to a role, where the members include user accounts, user groups, user
// domains, and service accounts. A 'role' is a named set of permissions,
// defined by IAM. The definition of a role is outside the policy.
//
// A permission check first determines the roles that include the specified
// permission, and then determines if the principal specified is a
// member of a binding to at least one of these roles. The membership check is
// recursive when a group is bound to a role.
//
// Policy examples:
//
// ```
// {
//   "bindings": [
//     {
//       "role": "roles/owner",
//       "members": [
//         "user:mike@example.com",
//         "group:admins@example.com",
//         "domain:google.com",
//         "serviceAccount:frontend@example.iam.gserviceaccounts.com"]
//     },
//     {
//       "role": "roles/viewer",
//       "members": ["user:sean@example.com"]
//     }
//   ]
// }
// ```
type Policy struct {
	// The policy language version. The version of the policy is
	// represented by the etag. The default version is 0.
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// It is an error to specify multiple bindings for the same role.
	// It is an error to specify a binding with no members.
	Bindings []*Binding `protobuf:"bytes,4,rep,name=bindings" json:"bindings,omitempty"`
	// Can be used to perform a read-modify-write.
	Etag []byte `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}

func (m *Policy) GetBindings() []*Binding {
	if m != nil {
		return m.Bindings
	}
	return nil
}

// Associates members with roles. See below for allowed
// formats of members.
type Binding struct {
	// The name of the role to which the members should be bound.
	// Examples: "roles/viewer", "roles/editor", "roles/owner".
	// Required
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// Format of member entries:
	// 1. allUsers
	//    Matches any requesting principal (users, service accounts or anonymous).
	//
	// 2. allAuthenticatedUsers
	//    Matches any requesting authenticated principal (users or service
	//    accounts).
	//
	// 3. user:{emailid}
	//    A google user account using an email address.
	//    For example alice@gmail.com, joe@example.com
	//
	// 4. serviceAccount:{emailid}
	//    An service account email.
	//
	// 5. group:{emailid}
	//    A google group with an email address. For example
	//    auth-ti-cloud@google.com
	//
	// 6. domain:{domain}
	//    A Google Apps domain name.
	//    For example google.com, example.com
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *Binding) Reset()         { *m = Binding{} }
func (m *Binding) String() string { return proto.CompactTextString(m) }
func (*Binding) ProtoMessage()    {}

func init() {
	proto.RegisterType((*Policy)(nil), "google.iam.v1.Policy")
	proto.RegisterType((*Binding)(nil), "google.iam.v1.Binding")
}
