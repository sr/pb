// Code generated by protoc-gen-gogo.
// source: google/api/monitored_resource.proto
// DO NOT EDIT!

package google_api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A descriptor that describes the schema of [MonitoredResource][google.api.MonitoredResource].
type MonitoredResourceDescriptor struct {
	// The monitored resource type. For example, the type `"cloudsql_database"`
	// represents databases in Google Cloud SQL.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A concise name for the monitored resource type that can be displayed in
	// user interfaces. For example, `"Google Cloud SQL Database"`.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,proto3" json:"display_name,omitempty"`
	// A detailed description of the monitored resource type that can be used in
	// documentation.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A set of labels that can be used to describe instances of this monitored
	// resource type. For example, Google Cloud SQL databases can be labeled with
	// their `"database_id"` and their `"zone"`.
	Labels []*LabelDescriptor `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty"`
}

func (m *MonitoredResourceDescriptor) Reset()         { *m = MonitoredResourceDescriptor{} }
func (m *MonitoredResourceDescriptor) String() string { return proto.CompactTextString(m) }
func (*MonitoredResourceDescriptor) ProtoMessage()    {}

func (m *MonitoredResourceDescriptor) GetLabels() []*LabelDescriptor {
	if m != nil {
		return m.Labels
	}
	return nil
}

// A monitored resource describes a resource that can be used for monitoring
// purpose. It can also be used for logging, billing, and other purposes. Each
// resource has a `type` and a set of `labels`. The labels contain information
// that identifies the resource and describes attributes of it. For example,
// you can use monitored resource to describe a normal file, where the resource
// has `type` as `"file"`, the label `path` identifies the file, and the label
// `size` describes the file size. The monitoring system can use a set of
// monitored resources of files to generate file size distribution.
type MonitoredResource struct {
	// The monitored resource type. This field must match the corresponding
	// [MonitoredResourceDescriptor.type][google.api.MonitoredResourceDescriptor.type] to this resource..  For example,
	// `"cloudsql_database"` represents Cloud SQL databases.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Values for some or all of the labels listed in the associated monitored
	// resource descriptor. For example, you specify a specific Cloud SQL database
	// by supplying values for both the `"database_id"` and `"zone"` labels.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MonitoredResource) Reset()         { *m = MonitoredResource{} }
func (m *MonitoredResource) String() string { return proto.CompactTextString(m) }
func (*MonitoredResource) ProtoMessage()    {}

func (m *MonitoredResource) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*MonitoredResourceDescriptor)(nil), "google.api.MonitoredResourceDescriptor")
	proto.RegisterType((*MonitoredResource)(nil), "google.api.MonitoredResource")
}
